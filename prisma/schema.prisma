generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id           String   @id @default(uuid()) @db.Uuid
  author       String   @map("author")
  datasetId    String?  @map("dataset_id")
  location     String?  @map("location")
  createTime   DateTime @map("create_time")
  createDate   DateTime @default(now()) @map("create_date")
  coverVideo   String   @map("coverVideo")
  webVideoUrl  String   @map("web_video_url")
  shareCount   Int      @map("share_count")
  likeCount    Int      @map("like_count")
  playCount    Int      @map("play_count")
  collectCount Int      @map("collect_count")
  commentCount Int      @map("comment_count")
  searchQuery  String   @map("search_query")
  source       String   @default("bank-konten") @map("source")

  hashtags VideoHashtag[]
  isAd     Boolean?

  @@index([datasetId])
  @@index([createTime])
  @@index([createDate])
  @@map("videos")
}

model Hashtag {
  id   Int    @id @default(autoincrement())
  name String @unique

  videos VideoHashtag[]

  @@map("hashtags")
}

model n8n_chat_histories {
  id         Int    @id @default(autoincrement())
  session_id String
  message    Json

  @@map("n8n_chat_histories")
}

model VideoHashtag {
  videoId   String @db.Uuid
  hashtagId Int

  video   Video   @relation(fields: [videoId], references: [id])
  hashtag Hashtag @relation(fields: [hashtagId], references: [id])

  @@id([videoId, hashtagId])
  @@map("video_hashtags")
}

enum TypePost {
  feed
  reels
  carousel
}

model Jam {
  id        String   @id @default(uuid()) @db.Uuid
  daftarJam       String[] @map("jam") @db.Text
  datePost  DateTime @map("date_post")

  posts     Post[]

  @@map("jam")
}

model Post {
  id          String     @id @default(uuid()) @db.Uuid
  medsos      String
  akun        String
  idakun      String
  idtoken     String
  caption     String
  datePost    DateTime   @map("date_post")
  jamPost     DateTime?  @map("jam_post")
  jamToPost   DateTime?  @map("jam_to_post")
  cby         Int
  mby         Int?
  cdate       DateTime   @default(now())
  mdate       DateTime   @updatedAt
  isdelete    Boolean    @default(false)
  urutan      String
  typePost    TypePost

  // Tambahan opsional untuk kontrol proses upload & publish
  publishedId String?    // ID posting hasil publish ke Meta API
  status      String?    // draft | uploaded | published | failed

  // Relasi opsional ke Jam
  jamId       String?    @db.Uuid
  jam         Jam?       @relation(fields: [jamId], references: [id])

  // Relasi ke tabel media (carousel)
  medias      PostMedia[]

  @@map("posts")
  @@index([datePost])
  @@index([medsos])
}

model PostMedia {
  id          String   @id @default(uuid()) @db.Uuid
  postId      String   @db.Uuid
  imageUrl    String
  coverUrl    String? 
  extention   String
  creationId  String?  // hasil upload ke Meta API
  urutan      Int      // urutan dalam carousel
  cdate       DateTime @default(now())

  post        Post     @relation(fields: [postId], references: [id])

  @@map("post_medias")
  @@index([postId])
  @@index([urutan])
}
