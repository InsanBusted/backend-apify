generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id           String         @id @default(uuid()) @db.Uuid
  author       String         @map("author")
  datasetId    String?        @map("dataset_id")
  createTime   DateTime       @map("create_time")
  coverVideo   String         @map("coverVideo")
  webVideoUrl  String         @map("web_video_url")
  shareCount   Int            @map("share_count")
  likeCount    Int            @map("like_count")
  playCount    Int            @map("play_count")
  collectCount Int            @map("collect_count")
  commentCount Int            @map("comment_count")
  isAd         Boolean?
  searchQuery  String         @map("search_query")
  createDate   DateTime       @default(now()) @map("create_date")
  location     String?        @map("location")
  source       String         @default("bank-konten") @map("source")
  hashtags     VideoHashtag[]

  @@index([datasetId])
  @@index([createTime])
  @@index([createDate])
  @@map("videos")
}

model Hashtag {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  videos VideoHashtag[]

  @@map("hashtags")
}

model n8n_chat_histories {
  id         Int    @id @default(autoincrement())
  session_id String
  message    Json

  @@map("n8n_chat_histories")
}

model VideoHashtag {
  videoId   String  @db.Uuid
  hashtagId Int
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])
  video     Video   @relation(fields: [videoId], references: [id])

  @@id([videoId, hashtagId])
  @@map("video_hashtags")
}

model Jam {
  id        String   @id @default(uuid()) @db.Uuid
  daftarJam String[] @map("jam")
  datePost  DateTime @map("date_post")
  posts     Post[]

  @@map("jam")
}

model Post {
  id          String      @id @default(uuid()) @db.Uuid
  medsos      String
  akun        String
  idakun      String
  idtoken     String
  caption     String
  datePost    DateTime    @map("date_post")
  jamPost     DateTime?   @map("jam_post")
  jamToPost   DateTime?   @map("jam_to_post")
  cby         Int
  mby         Int?
  cdate       DateTime    @default(now())
  mdate       DateTime    @updatedAt
  isdelete    Boolean     @default(false)
  urutan      String
  typePost    TypePost
  publishedId String?
  status      String?
  jamId       String?     @db.Uuid
  linkPost    String?
  medias      PostMedia[]
  jam         Jam?        @relation(fields: [jamId], references: [id])

  @@index([datePost])
  @@index([medsos])
  @@map("posts")
}

model PostMedia {
  id         String   @id @default(uuid()) @db.Uuid
  postId     String   @db.Uuid
  imageUrl   String
  coverUrl   String?
  extention  String
  creationId String?
  urutan     Int
  cdate      DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([urutan])
  @@map("post_medias")
}

model post_linkpost_events {
  id         Int       @id @default(autoincrement())
  post_id    String    @db.Uuid
  link_post  String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

enum TypePost {
  feed
  reels
  carousel
}
